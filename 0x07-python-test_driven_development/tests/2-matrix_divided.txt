file to test matrix devision function

>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

>>> print(matrix_divided([], 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided("[]", 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([[]], 3))
[[]]

>>> print(matrix_divided(None, 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided(True, 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([1,2], 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[1,2], [3,4,5]], 2))
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> print(matrix_divided(["34", [3,4,5]], 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([[4, 5], (4, 6)], 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([["4", 5], [4, 6]], 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([[4, 5], [4, "6"]], 2)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) 
            of integers/floats

>>> print(matrix_divided([[4, 5], [4, 5]], 0))
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> print(matrix_divided([[4, 5], [4, 6]], "s")) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> print(matrix_divided([[4, 5], [4, 6]], False)) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> print(matrix_divided([[6, 8], [4, 2]], 2))
[[3.0, 4.0], [2.0, 1.0]]

>>> print(matrix_divided([[6, 8.8], [4.5, 2]], 2))
[[3.0, 4.4], [2.25, 1.0]]

>>> print(matrix_divided([[6, 8.8], [4.5, 2]], 2))
[[3.0, 4.4], [2.25, 1.0]]

>>> print(matrix_divided([[6, 8], [4, 2]], 2.5))
[[2.4, 3.2], [1.6, 0.8]]

>>> print(matrix_divided([[6.5, 8.4], [4.9, 2.2]], 2.5))
[[2.6, 3.36], [1.96, 0.88]]

>>> print(matrix_divided([[-6, 8], [4, -2]], 2))
[[-3.0, 4.0], [2.0, -1.0]]

>>> print(matrix_divided([[-6, 8], [4, -2]], -2))
[[3.0, -4.0], [-2.0, 1.0]]
