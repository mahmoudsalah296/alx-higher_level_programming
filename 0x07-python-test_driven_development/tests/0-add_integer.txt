>>> add_integer = __import__("0-add_integer").add_integer

>>> add_integer (1, 5)
6

>>> add_integer (0, -1)
-1

>>> add_integer (-2, -1)
-3

>>> add_integer (-6, 9)
3

>>> add_integer (6, -1)
5

>>> add_integer (6.2, -1)
5

>>> add_integer (6, -1.3)
5

>>> add_integer (6.3, -1.2)
5

>>> add_integer (2.3)
100

>>> add_integer (2)
100

>>> add_integer (-2.3)
96

>>> add_integer (0, True)
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer (False, True)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer (True, 6)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer ("True", 6)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer (5, "3")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer ("mahmoud", "6")
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer (3+5j, 6)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer (63, 6+4j)
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer (2+4j, 6-5j)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer (True)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer ("Salah")
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(1e1000, 100)
Traceback (innermost last):
...
OverflowError: a is too large

>>> add_integer(100, 10e1000)
Traceback (innermost last):
...
OverflowError: b is too large
